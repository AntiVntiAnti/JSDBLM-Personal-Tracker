"""_summary_
This class is designed to initialize the user interface components, apply styles, and connect various signals to their corresponding slots. The class contains three primary methods: __init__, initialize_widgets, and connect_signals.

The __init__ method is the constructor for the WefeDialog class. It initializes the dialog by calling the parent class's constructor with super().__init__(parent). It then sets up the user interface by calling self.setupUi(self), which is a method generated by the Qt Designer. After setting up the UI, it calls initialize_widgets to customize the widgets and apply styles, resizes the dialog to 300x350 pixels, and finally calls connect_signals to establish the necessary signal-slot connections.

The initialize_widgets method is responsible for customizing the widgets and applying styles to the dialog. It sets the stylesheet for the dialog using an external stylesheet file imported as stylesheet. Additionally, it connects the 'accepted' and 'rejected' signals of the button box to the accept and reject methods of the dialog, respectively. This ensures that the dialog responds appropriately when the user accepts or rejects the dialog.

The connect_signals method sets up the connections between the valueChanged signals of the sliders and the setValue slots of the corresponding spinboxes, and vice versa. This ensures that when the value of a slider changes, the corresponding spinbox is updated, and when the value of a spinbox changes, the corresponding slider is updated. The method assumes that the widgets (sliders and spinboxes) are defined in the Designer file and accessed directly. The connections are made for four pairs of sliders and spinboxes: wellbeing, excite, focus, and energy.

Overall, the WefeDialog class is a well-structured and organized implementation that leverages PyQt6 to create a custom dialog with synchronized sliders and spinboxes, styled using an external stylesheet.

"""
from PyQt6.QtWidgets import QDialog
from ui.dialogs_wefe.wefe_ui import Ui_Dialog  # Import the generated file
from ui.dialogs_wefe.static.wefe_stylesheet import stylesheet
import ui.dialogs_wefe.static.weferes
from utility.logger_setup import create_logger
logger = create_logger(__name__)
from ui.frameless_dialog_window import FramelessDialog


class WefeDialog(FramelessDialog, Ui_Dialog):
    """
    WefeDialog is a custom dialog class that inherits from QDialog and Ui_Dialog.
    This class is responsible for initializing the UI components, setting up styles, and connecting signals to slots for various widgets.
    Methods:
        __init__(self, parent=None):
            Initializes the dialog, sets up the UI, initializes widgets, resizes the dialog, and connects signals.
        initialize_widgets(self):
            Customizes widgets and styles, sets up stylesheets, and connects the button box signals to the instance methods.
        connect_signals(self):
            Connects the valueChanged signals of sliders to the corresponding spinboxes and vice versa.
    """
    
    def __init__(self, parent=None):
        """
        Initializes the dialog.

        Args:
            parent (QWidget, optional): The parent widget. Defaults to None.

        This method sets up the UI, initializes widgets, resizes the dialog,
        and connects signals.
        """
        try:
            super().__init__(parent)
            self.setupUi(self)  # Call the generated setup method
            self.initialize_widgets()
            self.setFixedSize(265, 380)
            self.connect_signals()
        except Exception as e:
            logger.error(f"Error in constructicon of wefe_dialog : {e}", exc_info=True)
            
    def initialize_widgets(self):
        """
        Initializes the widgets for the dialog.

        This method customizes the widgets and styles for the dialog. It sets up
        the stylesheets from an external file and correctly connects the button
        box to the instance methods for handling acceptance and rejection actions.

        Actions:
        - Sets the stylesheet for the dialog.
        - Connects the 'accepted' signal of the button box to the 'accept' method.
        - Connects the 'rejected' signal of the button box to the 'reject' method.
        """
        try:
            # Here you can customize widgets, styles, etc.
            # Set up stylesheets from external file
            self.setStyleSheet(stylesheet)
            # Correctly connecting the button box to the instance methods
            self.buttonBox.accepted.connect(self.accept)
            self.buttonBox.rejected.connect(self.reject)
        except Exception as e:
            logger.error(f"Error in constructicon of wefe_dialog : {e}", exc_info=True)
    
    def connect_signals(self):
        """
        Connects the signals and slots for the sliders and spinboxes.

        This method sets up the connections between the valueChanged signals of the sliders
        and the setValue slots of the corresponding spinboxes, and vice versa. This ensures
        that when the value of a slider changes, the corresponding spinbox is updated, and
        when the value of a spinbox changes, the corresponding slider is updated.

        The following connections are made:
        - wellbeing_slider <-> wellbeing_spinbox
        - excite_slider <-> excite_spinbox
        - focus_slider <-> focus_spinbox
        - energy_slider <-> energy_spinbox
        """
        try:
            # Assuming these widgets are defined in the Designer file and accessed directly
            self.wellbeing_slider.valueChanged.connect(self.wellbeing_spinbox.setValue)
            self.wellbeing_spinbox.valueChanged.connect(self.wellbeing_slider.setValue)
            self.excite_slider.valueChanged.connect(self.excite_spinbox.setValue)
            self.excite_spinbox.valueChanged.connect(self.excite_slider.setValue)
            self.focus_slider.valueChanged.connect(self.focus_spinbox.setValue)
            self.focus_spinbox.valueChanged.connect(self.focus_slider.setValue)
            self.energy_slider.valueChanged.connect(self.energy_spinbox.setValue)
            self.energy_spinbox.valueChanged.connect(self.energy_slider.setValue)
        except Exception as e:
            logger.error(f"Error in constructicon of mmdmr_dialog : {e}", exc_info=True)
