"""
The provided code defines a custom dialog class named MmdmrDialog that inherits from both 
QDialog and Ui_Dialog. This class is designed to initialize the user interface components, 
apply styles, and connect various signals to their corresponding slots. The class contains 
three primary methods: __init__, initialize_widgets, and connect_signals.

The __init__ method is the constructor for the MmdmrDialog class. It initializes the dialog by 
calling the parent class's constructor with super().__init__(parent). It then sets up the user 
interface by calling self.setupUi(self), which is a method generated by the Qt Designer. After 
setting up the UI, it calls initialize_widgets to customize the widgets and apply styles, 
resizes the dialog to 300x350 pixels, and finally calls connect_signals to establish the 
necessary signal-slot connections.

The initialize_widgets method is responsible for customizing the widgets and applying styles to the dialog. It sets the 
stylesheet for the dialog using an external stylesheet file imported as stylesheet. Additionally, it connects the 
'accepted' and 'rejected' signals of the button box to the accept and reject methods of the dialog, respectively. 
This ensures that the dialog responds appropriately when the user accepts or rejects the dialog.

The connect_signals method sets up the connections between the valueChanged signals of the sliders and the setValue slots of the corresponding spinboxes, and vice versa. This ensures that when the value of a slider changes, the corresponding spinbox is updated, and when the value of a spinbox changes, the corresponding slider is updated. The method assumes that the widgets (sliders and spinboxes) are defined in the Designer file and accessed directly. The connections are made for four pairs of sliders and spinboxes: mood, mania, depression, and mixed risk.

Overall, the MmdmrDialog class is a well-structured and organized implementation that leverages PyQt6 to create a custom dialog with synchronized sliders and spinboxes, styled using an external stylesheet.
"""
from PyQt6.QtWidgets import QDialog
from ui.dialogs_mmdmr.mmdmr_ui import Ui_Dialog  # Import the generated file
from ui.dialogs_mmdmr.static.mmdmr_style import stylesheet
import ui.dialogs_mmdmr.static.mmdmrres
from ui.frameless_dialog_window import FramelessDialog
from utility.logger_setup import create_logger
logger = create_logger(__name__)


class MmdmrDialog(FramelessDialog, Ui_Dialog):
    """
    MmdmrDialog is a custom dialog class that inherits from QDialog and Ui_Dialog.
    It initializes the UI components, sets up styles, and connects signals to slots.
    Methods:
    __init__(self, parent=None):
        Initializes the dialog, sets up the UI, initializes widgets, and connects signals.
    initialize_widgets(self):
        Customizes widgets and styles, and connects the button box signals to the instance methods.
    connect_signals(self):
        Connects the valueChanged signals of various sliders to their corresponding value display widgets and vice versa.
    """
    def __init__(self, parent=None):
        """
           Initializes the MMDMRDialog class.
    
           Args:
               parent (QWidget, optional): The parent widget. Defaults to None.
    
           This constructor performs the following actions:
           - Calls the parent class constructor.
           - Sets up the UI by calling the generated setup method.
           - Initializes the widgets.
           - Resizes the dialog to 300x350 pixels.
           - Connects the signals to their respective slots.
       """
        try:
            super().__init__(parent)
            self.setupUi(self)
            self.initialize_widgets()
            self.setFixedSize(265, 380)
            self.connect_signals()
        except Exception as e:
            logger.error(f"Error in constructicon of mmdmr_dialog : {e}", exc_info=True)
    
    def initialize_widgets(self):
        """
        Initializes and customizes the widgets and styles for the dialog.

        This method sets up the stylesheets from an external file and connects
        the button box signals to the corresponding instance methods for handling
        acceptance and rejection actions.
        """
        try:
            # Here you can customize widgets, styles, etc.
            # Set up stylesheets from external file
            self.setStyleSheet(stylesheet)
            # Correctly connecting the button box to the instance methods
            self.buttonBox.accepted.connect(self.accept)
            self.buttonBox.rejected.connect(self.reject)
        except Exception as e:
            logger.error(f"Error in constructicon of mmdmr_dialog : {e}", exc_info=True)
            
    def connect_signals(self):
        """
        Connects the signals and slots for the mood, mania, depression, and mixed risk sliders and their corresponding value displays.

        This method assumes that the widgets (sliders and value displays) are defined in the Designer file and are accessed directly.
        It sets up the following connections:
        - mood_slider's valueChanged signal to mood's setValue slot
        - mood's valueChanged signal to mood_slider's setValue slot
        - mania_slider's valueChanged signal to mania's setValue slot
        - mania's valueChanged signal to mania_slider's setValue slot
        - depression_slider's valueChanged signal to depression's setValue slot
        - depression's valueChanged signal to depression_slider's setValue slot
        - mixed_risk_slider's valueChanged signal to mixed_risk's setValue slot
        - mixed_risk's valueChanged signal to mixed_risk_slider's setValue slot
        """
        # Assuming these widgets are defined in the Designer file and accessed directly
        try:
            self.mood_slider.valueChanged.connect(self.mood.setValue)
            self.mood.valueChanged.connect(self.mood_slider.setValue)
            self.mania_slider.valueChanged.connect(self.mania.setValue)
            self.mania.valueChanged.connect(self.mania_slider.setValue)
            self.depression_slider.valueChanged.connect(self.depression.setValue)
            self.depression.valueChanged.connect(self.depression_slider.setValue)
            self.mixed_risk_slider.valueChanged.connect(self.mixed_risk.setValue)
            self.mixed_risk.valueChanged.connect(self.mixed_risk_slider.setValue)
        except Exception as e:
            logger.error(f"Error in constructicon of mmdmr_dialog : {e}", exc_info=True)
